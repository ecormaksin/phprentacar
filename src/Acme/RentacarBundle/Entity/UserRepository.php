<?php

namespace Acme\RentacarBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * Create user.
     *
     * @param User $user
     */
    public function createUser(User $user)
    {
        $manager = $this->getEntityManager();

        $other = $this->findOneBy(array('email' => $user->getEmail()));
        if ($other) {
            throw new \InvalidArgumentException('Duplicated user email');
        }

        $user->setActivationKey($this->issueActivationKey());

        $manager->persist($user);
        $manager->flush();
    }

    /**
     * Activate user.
     *
     * @param string $activationKey
     * @return User
     */
    public function activateUser($activationKey)
    {
        $manager = $this->getEntityManager();

        $user = $this->findOneBy(array('activationKey' => $activationKey));
        if (!$user) {
            return;
        }

        $user->setActivationKey(null);

        $manager->flush();

        return $user;
    }

    /**
     * Authenticated user by email and password.
     *
     * @param string $email
     * @param string $password
     * @return User
     */
    public function authenticateUser($email, $password)
    {
        $user = $this->findOneBy(array(
            'email' => $email,
        ));

        if ($user && $user->isValidPassword($password) && $user->isEnabled()) {
            return $user;
        }

        return;
    }

    /**
     * Issue activation key.
     *
     * @return string
     */
    protected function issueActivationKey()
    {
        $bytes = false;
        if (function_exists('openssl_random_pseudo_bytes')) {
            $bytes = openssl_random_pseudo_bytes(32, $strong);

            if (true !== $strong) {
                $bytes = false;
            }
        }

        if (false === $bytes) {
            $bytes = hash('sha256', uniqid(mt_rand(), true), true);
        }

        $key = base_convert(bin2hex($bytes), 16, 36);

        return $key;
    }
}
